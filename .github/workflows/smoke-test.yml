---
name: 'Smoke test'
on:
  branch_protection_rule:
  check_run:
  check_suite:
  create:
  delete:
  deployment:
  deployment_status:
  discussion:
  discussion_comment:
  fork:
  gollum:
  issue_comment:
  issues:
  label:
  merge_group:
  milestone:
  page_build:
  project:
  project_card:
  project_column:
  public:
  pull_request:
  pull_request_review:
  pull_request_review_comment:
  pull_request_target:
  push:
  registry_package:
  release:
  repository_dispatch:
  schedule:
    - cron: '0 0 1 * *'
  status:
  watch:
  workflow_call:
  workflow_run:
    workflows: [ 'Lint' ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  'test':
    name: 'Smoke Test Bash Actions Core'
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: >
          bash --noprofile --norc
          -o errexit -o pipefail -o nounset
          -c "source ${{github.workspace}}/core.sh ; set +o verbose +o xtrace ; source '{0}'"
    steps:
      - uses: actions/github-script@HEAD
        with:
          script: |
            const fs = require('fs')
            core.exportVariable('MY_VAR', 'foo bar baz')
            fs.readFile(process.env.GITHUB_ENV, 'utf8', (err, data) => {
              if (err) return console.error('Error reading the file:', err)
              console.log(data)
            })
    
      - name: 'Checkout'
        uses: actions/checkout@main

      - name: 'Setup test environment'
        run: |
          # Helper functions
          pprint() {
            echo "$( printf '`%s` ' "${@}" )=> '$( "${@}" )'"
          }
          
          assert_equal() {
            if [[ "$1" != "$2" ]]; then
              echo "::error::Assertion failed: Expected '$2', but got '$1'"
              exit 1
            fi
          }
          
          assert_contains() {
            if [[ "$1" != *"$2"* ]]; then
              echo "::error::Assertion failed: Expected '$1' to contain '$2'"
              exit 1
            fi
          }
          declare -f >> ${GITHUB_WORKSPACE}/core.sh

      - name: 'Test Context'
        run: |
          echo "::group::Testing Basic Context Functions"
          pprint context.eventName
          pprint context.sha
          pprint context.ref
          pprint context.workflow
          pprint context.action
          pprint context.actor
          pprint context.job
          pprint context.runAttempt
          pprint context.runNumber
          pprint context.runId
          pprint context.apiUrl
          pprint context.serverUrl
          pprint context.graphqlUrl
          echo "::endgroup::"
          
          echo "::group::Testing context.payload"
          context.payload | jq --color-output
          echo "::endgroup::"

          set -vx
          echo "::group::Testing context.repo"
          context.repo
          read -r owner repo <<< "$(context.repo)"
          [[ "${owner}/${repo}" == "${GITHUB_REPOSITORY}" ]]
          echo "::endgroup::"
          
          echo "::group::Testing context.issue"
          context.issue
          read -r owner repo issue <<< "$(context.issue)"
          [[ "${owner}/${repo}" == "${GITHUB_REPOSITORY}" ]]
          if [[ -n "${issue}" ]] ; then
            (( issue > 0 ))
          fi
          echo "::endgroup::"

      - name: 'Test Core Functions'
        run: |
          set -vx
          echo "::group::Testing Core Functions"
          # Test exportVariable
          core.exportVariable "TEST_VAR" "test_value"
          assert_equal "$TEST_VAR" "test_value"
          cat "${GITHUB_ENV}"
          cat "${GITHUB_ENV}" | hexdump -c
          
          # Test setSecret (we can't actually test the masking, but we can call the function)
          core.setSecret "secret_value"
          
          # Test addPath
          original_path="$PATH"
          core.addPath "/test/path"
          assert_contains "$PATH" "/test/path"
          PATH="$original_path"  # Reset PATH
          
          # Test getInput (we'll simulate an input)
          export INPUT_TEST_INPUT="test input value"
          input_value=$(core.getInput "test_input")
          assert_equal "$input_value" "test input value"
          
          # Test setOutput
          core.setOutput "test_output" "test output value"
          
          # Test various logging functions
          core.debug "This is a debug message"
          core.error "This is an error message"
          core.warning "This is a warning message"
          core.notice "This is a notice"
          core.info "This is an info message"
          
          # Test group functions
          core.startGroup "Test Group"
          echo "This is inside a group"
          core.endGroup
          
          # Test state functions
          core.saveState "TEST_STATE" "test state value"
          state_value=$(core.getState "TEST_STATE")
          assert_equal "$state_value" "test state value"
          echo "::endgroup::"

      - name: 'Test Summary Functions'
        run: |
          echo "::group::Testing Summary Functions"
          summary.addRaw "This is raw text" --eol
          summary.addCodeBlock "echo 'Hello, World!'" --lang "bash"
          summary.addList "Item 1" "Item 2" "Item 3"
          summary.addHeading "Test Heading" -l 2
          summary.addSeparator
          summary.addQuote "To be or not to be"
          summary.addLink "GitHub" "https://github.com"
          
          content=$(summary.stringify)
          assert_contains "$content" "This is raw text"
          assert_contains "$content" "echo 'Hello, World!'"
          assert_contains "$content" "<li>Item 1</li>"
          assert_contains "$content" "<h2>Test Heading</h2>"
          assert_contains "$content" "<hr>"
          assert_contains "$content" "<blockquote>To be or not to be</blockquote>"
          assert_contains "$content" "<a href=\"https://github.com\">GitHub</a>"
          
          summary.write
          echo "::endgroup::"

      - name: 'Test Error Handling'
        run: |
          echo "::group::Testing Error Handling"
          # Test required input
          if core.getInput --required "non_existent_input" 2>/dev/null; then
            echo "::error::Expected error for missing required input"
            exit 1
          fi
          
          # Test invalid boolean input
          export INPUT_INVALID_BOOL="not_a_bool"
          if core.getBooleanInput "invalid_bool" 2>/dev/null; then
            echo "::error::Expected error for invalid boolean input"
            exit 1
          fi
          echo "::endgroup::"

      - name: 'Verify Workflow Success'
        run: |
          echo "::group::Workflow Summary"
          echo "All tests passed successfully!"
          echo "Smoke test completed for Bash Actions Core"
          echo "::endgroup::"
